# Copyright (C) 1991-2013 Altera Corporation
# Your use of Altera Corporation's design tools, logic functions 
# and other software and tools, and its AMPP partner logic 
# functions, and any output files from any of the foregoing 
# (including device programming or simulation files), and any 
# associated documentation or information are expressly subject 
# to the terms and conditions of the Altera Program License 
# Subscription Agreement, Altera MegaCore Function License 
# Agreement, or other applicable license agreement, including, 
# without limitation, that your use is for the sole purpose of 
# programming logic devices manufactured by Altera and sold by 
# Altera or its authorized distributors.  Please refer to the 
# applicable agreement for further details.


# ***************************************************************************
# ***************************************************************************
# 
# File:		C:/Users/Thuan Uong/Desktop/Week7/bitdetector/simulation/modelsim/bitdetector_dump_all_vcd_nodes.tcl
# 
# Description:	Script for ModelSim-Altera (Verilog) VCD File Dumping
# 		This script is used to direct ModelSim-Altera (Verilog) to dump
# 		all nodes in the design to a VCD output file
# 
# Usages:	C:/Users/Thuan Uong/Desktop/Week7/bitdetector/simulation/modelsim/bitdetector_dump_all_vcd_nodes.tcl
# 
# Generated by:	Quartus II 64-Bit
# 		Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition
# 
# Date:		Fri Jun 01 10:43:18 2018
# 
# Design:	bitdetector
# 
# ***************************************************************************
# ***************************************************************************

# ----------------------------------------------------------------
#
proc add_vcd_signals { hierarchy vcd_filename } {
#
# Description:	This function directs ModelSim-Altera (Verilog) to print out the
#		appropriate VCD signals, with the hierarchy level
#		prepended to each signal name
#
# ----------------------------------------------------------------

   catch { vcd add "$hierarchy/i_ready_areg0_regout" }
   catch { vcd add "$hierarchy/o_valid_areg0_regout" }
   catch { vcd add "$hierarchy/o_sop_areg0_regout" }
   catch { vcd add "$hierarchy/o_eop_areg0_regout" }
   catch { vcd add "$hierarchy/outp_areg0_regout" }
   catch { vcd add "$hierarchy/i_ready_a0_combout" }
   catch { vcd add "$hierarchy/state_aS0_aregout" }
   catch { vcd add "$hierarchy/Selector2_a0_combout" }
   catch { vcd add "$hierarchy/o_sop_a0_combout" }
   catch { vcd add "$hierarchy/o_eop_a0_combout" }
   catch { vcd add "$hierarchy/inp_pre_aregout" }
   catch { vcd add "$hierarchy/outp_a0_combout" }
   catch { vcd add "$hierarchy/state_aS2_aregout" }
   catch { vcd add "$hierarchy/outp_a1_combout" }
   catch { vcd add "$hierarchy/state_a35_combout" }
   catch { vcd add "$hierarchy/inp_pre_a0_combout" }
   catch { vcd add "$hierarchy/state_aS1_aregout" }
   catch { vcd add "$hierarchy/state_a36_combout" }
   catch { vcd add "$hierarchy/state_a37_combout" }
   catch { vcd add "$hierarchy/state_a38_combout" }
   catch { vcd add "$hierarchy/state_a39_combout" }
   catch { vcd add "$hierarchy/state_a40_combout" }
   catch { vcd add "$hierarchy/i_ready" }
   catch { vcd add "$hierarchy/o_valid" }
   catch { vcd add "$hierarchy/o_sop" }
   catch { vcd add "$hierarchy/o_eop" }
   catch { vcd add "$hierarchy/outp" }
   catch { vcd add "$hierarchy/reset_n_acombout" }
   catch { vcd add "$hierarchy/reset_n" }
   catch { vcd add "$hierarchy/o_ready_acombout" }
   catch { vcd add "$hierarchy/o_ready" }
   catch { vcd add "$hierarchy/clk_acombout" }
   catch { vcd add "$hierarchy/clk" }
   catch { vcd add "$hierarchy/i_valid_acombout" }
   catch { vcd add "$hierarchy/i_valid" }
   catch { vcd add "$hierarchy/i_sop_acombout" }
   catch { vcd add "$hierarchy/i_sop" }
   catch { vcd add "$hierarchy/i_eop_acombout" }
   catch { vcd add "$hierarchy/i_eop" }
   catch { vcd add "$hierarchy/inp_acombout" }
   catch { vcd add "$hierarchy/inp" }
   catch { vcd add "$hierarchy/outp_areg0feeder_combout" }
}

# ----------------------------------------------------------------
#
proc main { argv } {
#
# Description:	Main entry point to script.  Iterate over all
#		hierarchy levels specified, and direct ModelSim-Altera (Verilog)
#		to print the relevant signals under each level
#
# ----------------------------------------------------------------

   set vcd_filename "bitdetector.vcd"
   set hierarchy "dut"

   vcd file "$vcd_filename"
   vcd on

   add_vcd_signals $hierarchy $vcd_filename
}

main $argv
